# ==================================================================================================================== #
# Authors:                                                                                                             #
#   Patrick Lehmann                                                                                                    #
#   Unai Martinez-Corral                                                                                               #
#                                                                                                                      #
# ==================================================================================================================== #
# Copyright 2020-2022 The pyTooling Authors                                                                            #
#                                                                                                                      #
# Licensed under the Apache License, Version 2.0 (the "License");                                                      #
# you may not use this file except in compliance with the License.                                                     #
# You may obtain a copy of the License at                                                                              #
#                                                                                                                      #
#   http://www.apache.org/licenses/LICENSE-2.0                                                                         #
#                                                                                                                      #
# Unless required by applicable law or agreed to in writing, software                                                  #
# distributed under the License is distributed on an "AS IS" BASIS,                                                    #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.                                             #
# See the License for the specific language governing permissions and                                                  #
# limitations under the License.                                                                                       #
#                                                                                                                      #
# SPDX-License-Identifier: Apache-2.0                                                                                  #
# ==================================================================================================================== #
name: Parameters

on:
  workflow_call:
    inputs:
      python_version:
        description: 'Python version.'
        required: false
        default: '3.11'
        type: string
      python_version_list:
        description: 'Space separated list of Python versions to run tests with.'
        required: false
        default: '3.7 3.8 3.9 3.10 3.11 pypy-3.7 pypy-3.8 pypy-3.9'
        type: string
      system_list:
        description: 'Space separated list of systems to run tests on.'
        required: false
        default: 'ubuntu windows msys2 macos'
        type: string
      name:
        description: 'Name of the tool.'
        required: true
        type: string
    outputs:
      params:
        description: "Parameters to be used in other jobs."
        value: ${{ jobs.Parameters.outputs.params }}
      python_jobs:
        description: "List of Python versions to be used in the matrix of other jobs."
        value: ${{ jobs.Parameters.outputs.python_jobs }}

jobs:

  Parameters:
    runs-on: ubuntu-latest
    outputs:
      params: ${{ steps.params.outputs.params }}
      python_jobs: ${{ steps.params.outputs.python_jobs }}
    steps:

      - name: Generate 'params' and 'python_jobs'
        id: params
        shell: python
        run: |
          name =          "${{ inputs.name }}".strip()
          pythonVersion = "${{ inputs.python_version }}".strip()
          systems =       "${{ inputs.system_list }}".strip()
          versions =      "${{ inputs.python_version_list }}".strip()
          
          currentMSYS2Version = "3.10"
          currentAlphaVersion = "3.12"
          currentAlphaRelease = "3.12.0-alpha.1"
          
          params = {
            'python_version': pythonVersion,
            'artifacts': {
              'unittesting': f"{name}-TestReport",
              'coverage':    f"{name}-Coverage",
              'typing':      f"{name}-Typing",
              'package':     f"{name}-Package",
              'doc':         f"{name}-Documentation",
            }
          }
          print(f"::set-output name=params::{params!s}")
          print("Parameters:")
          print(params)

          if systems == "":
            print("::error title=Parameter::system_list is empty.")
          else:
            systems = [sys.strip() for sys in systems.split(" ")]
          
          if versions == "":
            versions = [ pythonVersion ]
          else:
            versions = [ver.strip() for ver in versions.split(" ")]
          
          if "3.6" in versions:
              print("::warning title=Deprecated::Support for Python 3.6 ended in 2021.12.23.")
          if currentAlphaVersion in versions:
              print(f"::notice title=Experimental::Python {currentAlphaVersion} ({currentAlphaRelease}) is a pre-release.")
          
          data = {
              'python': {
                  '3.6':       { 'icon': '‚ö´',  'until': '2021.12.23' },
                  '3.7':       { 'icon': 'üî¥',  'until': '2023.06.27' },
                  '3.8':       { 'icon': 'üü†',  'until': '2024.10' },
                  '3.9':       { 'icon': 'üü°',  'until': '2025.10' },
                  '3.10':      { 'icon': 'üü¢',  'until': '2026.10' },
                  '3.11':      { 'icon': 'üü¢',  'until': '2027.10' },
                  '3.11':      { 'icon': 'üü£',  'until': '2028.10' },
                  'pypy-3.7':  { 'icon': '‚ü≤üî¥', 'until': '??' },
                  'pypy-3.8':  { 'icon': '‚ü≤üü†', 'until': '??' },
                  'pypy-3.9':  { 'icon': '‚ü≤üü°', 'until': '??' },
              },
              'sys': {
                  'ubuntu':  { 'icon': 'üêß', 'runs-on': 'ubuntu-latest',  'shell': 'bash' },
                  'windows': { 'icon': 'üßä', 'runs-on': 'windows-latest', 'shell': 'pwsh' },
                  'msys2':   { 'icon': 'üü¶', 'runs-on': 'windows-latest', 'shell': 'msys2 {0}' },
                  'macos':   { 'icon': 'üçé', 'runs-on': 'macos-latest',   'shell': 'bash' }
              }
          }
          
          jobs = [
              {
                  'sysicon': data['sys'][system]['icon'],
                  'system':  system,
                  'runs-on': data['sys'][system]['runs-on'],
                  'shell':   data['sys'][system]['shell'],
                  'pyicon':  data['python'][version]['icon'],
                  'python': currentAlphaRelease if version == currentAlphaVersion else version
              }
              for system in systems
              for version in (versions if system != 'msys2' else [currentMSYS2Version])
          ]
          print(f'::set-output name=python_jobs::{jobs!s}')
          print("Python jobs:")
          print(jobs)
